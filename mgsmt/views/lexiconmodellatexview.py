#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
LaTeX tabular display of the lexicon model.
"""

__author__ = "Sagar Indurkhya"
__copyright__ = "Copyright 2019-2022, Sagar Indurkhya"
__email__ = "indurks@mit.edu"

#------------------------------------------------------------------------------#

from z3 import *

import mgsmt
import mgsmt.views
import mgsmt.views.view_utils

from IPython.display import display, Math, Image
import contextlib, copy, os, shutil, subprocess, time, uuid


def safe_list_get(xs, i, default):
    try:
        return xs[i]
    except IndexError:
        return default


LATEX_TEMPLATE = r"""\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage{adjustbox}
\usepackage{amsmath}
\usepackage{booktabs}
\usepackage{graphicx}
\usepackage[table]{xcolor}
\definecolor{lightgray}{gray}{0.9}

\begin{document}
\pagenumbering{gobble}
\begin{table}[h!]
{\small
\rowcolors{2}{}{lightgray}
\begin{tabular}{%s}
\toprule
%s \\
\midrule
%s
\bottomrule
\end{tabular}
\caption{Model Output â€” An MG Lexicon Inferred from the Model Input. The
derivation generated by the lexicon for a sentence in the input sequence
accords with the constraints encoded in the syntactic relations that
annotate that sentence. Each lexical item consists of a pairing of a
phonetic form and a sequence of syntactic features, separated by a
double-colon. The phonetic form $\epsilon$ is covert (unpronounced). A
feature has: (i) a value from a finite set of categories; (ii) a type,
which is either \emph{selector}, \emph{selectee}, \emph{licensor} or
\emph{licensee}, indicated by the prefix $=$, $\sim$, $+$ and $-$
respectively; a $<$ or $>$ prefixed before a selector prefix indicates
that the selector triggers left or right head-movement respectively.
There is also a special feature, $C$, that serves to indicate the
completion of a parse. %s}
}
\end{table}
\end{document}
"""

class LexiconModelLaTeXView:

    def __init__(self, lexicon_models, include_ID_column=False):
        self.include_ID_column = include_ID_column
        self.lexicon_models = lexicon_models
        self.latex_source_filepath = None


    def display(self, dir_name, file_name):
        self.latex_source_filepath = dir_name + '/' + file_name + '.tex'
        return mgsmt.views.view_utils.display_latex(self.get_latex_source(),
                                                    dir_name,
                                                    file_name,
                                                    visualize=False,
                                                    include_rotation=False)


    def get_supplementary_caption(self):
        # TODO: Each of the following should be implemented as a method in
        # the LexiconModel class.
        num_distinct_pf = None
        num_distinct_feat_matrices = None
        num_total_sel_feats = None
        num_distinct_sel_feats = None
        num_total_lic_feats = None
        num_distinct_lic_feats = None
        return f"""This lexicon has {num_distinct_pf} distinct phonological forms;
{num_distinct_feat_matrices} distinct feature matrices; a total of {num_total_sel_feats}
selectional features with {num_distinct_sel_feats} distinct labels; a total of
{num_total_lic_feats} licensing features with {num_distinct_lic_feats} distinct labels."""


    def get_latex_source(self):
        n = len(self.lexicon_models)
        assert 0 < n <= 5
        lexica = [list(lm.latex()) for lm in self.lexicon_models]
        k = max([len(l) for l in lexica])
        headers = []
        if self.include_ID_column:
            headers += ["ID"]
        headers += ["Lexicon (%s)"%(x)
                    for i, x in enumerate('ABCDEFGHI')
                    if i < n]
        title_row = " & ".join(headers)

        rows = []
        for i in range(k):
            row = []
            if self.include_ID_column:
                row += [str(i+1)]
            row += [safe_list_get(lexicon, i, '~') for lexicon in lexica]
            rows.append(row)

        table_str = "\n".join([r" & ".join(row) + r" \\"
                               for row in rows])
        supplementary_caption = ""
        return LATEX_TEMPLATE%("l"*n + ("l" if self.include_ID_column else ""),
                               title_row,
                               table_str,
                               self.get_supplementary_caption())
